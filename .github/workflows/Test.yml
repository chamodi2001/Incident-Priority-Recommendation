name: Deploy React App to EC2 via Docker

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Install Docker, Git, AWS CLI (one-time or skip if already installed)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo yum update -y
          sudo yum install -y docker git awscli
          sudo systemctl start docker
          sudo systemctl enable docker

    - name: Deploy React App in Docker
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          cd /home/ec2-user

          # Clone or pull latest code
          if [ -d "IncidentTracker" ]; then
            cd IncidentTracker
            git pull origin main     
            git checkout main 
          else
            git clone --branch main https://${{ secrets.HUB_TOKEN }}@github.com/chamodi2001/https://github.com/chamodi2001/IncidentTracker

            cd IncidentTracker
          fi

          # 1-after cloning in EC2, build the docker image on both
          #build the frontend docker image
          cd incident-tracker-client
          pwd
          #tag the image with the name inc-trac-frontend
          sudo docker build -t inc-trac-frontend . 

          #build the backend docker image
          cd incident-tracker-server
          pwd
          #tag the image with the name inc-trac-backend
          sudo docker build -t inc-trac-backend . 


          #########################
          # 2-push the build docker images to Gitlab
          # STEP 2: Log in to GitLab Container Registry

          - name: Log in to GitLab Container Registry
          run: echo "${{ secrets.GITLAB_TOKEN }}" | docker login registry.gitlab.com -u gitlab-ci-token --password-stdin

          #########################
          # 3-using Github actions, pull the already build images to EC2 Actions
          # STEP 3: Build and Push Docker Images to GitLab
          - name: Build and Push Backend Image
          run: |
          docker build -t registry.gitlab.com/chamodigunathilaka2018/incidenttracker/incident-tracker-server:main ./incident-tracker-server
          docker push registry.gitlab.com/chamodigunathilaka2018/incidenttracker/incident-tracker-server:main

          - name: Build and Push Frontend Image
          run: |
          docker build -t registry.gitlab.com/chamodigunathilaka2018/incidenttracker/incident-tracker-client:main ./incident-tracker-client
          docker push registry.gitlab.com/chamodigunathilaka2018/incidenttracker/incident-tracker-client:main

          #########################
          # 4- using docker compose-> compose/combile all docker images, then build one image and run a one container
          # STEP 4: SSH into EC2 and Deploy via Docker Compose
          
          - name: Deploy on EC2
          uses: appleboy/ssh-action@master
          with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
          cd ~/incident-tracker

          echo 🔐 Logging in to GitLab Registry
          echo "${{ secrets.GITLAB_TOKEN }}" | docker login registry.gitlab.com -u gitlab-ci-token --password-stdin

          echo 🔄 Pulling latest images from GitLab
          docker compose pull

          echo 🛑 Stopping old containers
          docker compose down

          echo 🚀 Starting new containers
          docker compose up -d
          #########################


